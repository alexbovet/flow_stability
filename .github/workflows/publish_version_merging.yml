# Workflow triggered when we have a new release candidate
# This action is adapted from https://github.com/t4d-gmbh/stubbed_versioning
name: Publish latest version

on:
  pull_request:
    types:
      - closed

env:
  LABEL_PUBLISHED: 'release::published'

jobs:
  release-version:
    if: ${{ github.event.pull_request.merged && startsWith(github.head_ref, 'release-') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      OWNER: ${{ github.repository_owner }}
      REPO: ${{ github.event.repository.name }}
      EVENT: ${{ github.event.number }}  # This is either the issue or pr
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Get the version to release
        if: ${{ steps.published.outputs.labeled == 'false' }}
        id: release_version
        run: |
          git fetch --filter=tree:0 origin +refs/tags/*:refs/tags/*
          echo "VERSION=$(echo ${{ github.head_ref }}|grep -Eo '[0-9]+.[0-9]+.[0-9]+')" >> $GITHUB_OUTPUT
          echo "PREVIOUS_VERSION=`echo $(git tag --list --sort=version:refname | grep -E '^[0-9]+.[0-9]+.[0-9]+$' | tail -n1)`" >> $GITHUB_OUTPUT
      # check if the pr is labeled as published already
      - name: Check if the pull request is labeled with ${{ env.LABEL_PUBLISHED }}
        id: published
        run: |
          if $( gh pr view ${{ env.EVENT }} --repo ${{ env.OWNER }}/${{ env.REPO }} --json "labels" --jq ".[].[].name" | grep --quiet ${{ env.LABEL_PUBLISHED }}); then
            echo "LABELED=true" >> $GITHUB_OUTPUT
          else
            echo "LABELED=false" >> $GITHUB_OUTPUT
          fi
      - name: Attempt to create label ${{ env.LABEL_PUBLISHED }}
        if: ${{ steps.published.outputs.labeled == 'false' }}
        run: |
          gh label create ${{ env.LABEL_PUBLISHED }} --repo ${{ env.OWNER }}/${{ env.REPO }}
        continue-on-error: true  # make sure the next steps run also on failure

      # fetch the content in dist/
      - name: Get release content
        if: ${{ steps.published.outputs.labeled == 'false' }}
        run: |
          gh release download ${{ steps.release_version.outputs.version }} \
            --pattern './dist/*' \
            --repo ${{ env.OWNER }}/${{ env.REPO }}
          ls -al
          ls -al ./dist/

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install Twine
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Publish to PyPI (without binaries)
        run: |
          ls -al dist/*
          # twine upload dist/* --skip-existing
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

      - name: Publish to PyPI (with binaries)
        run: |
          ls -al dist/*
          # Build and upload binaries for each OS
          # python setup.py bdist_wheel
          # twine upload dist/* --skip-existing
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

      - name: Adding the label ${{ env.LABEL_PUBLISHED }}
        if: ${{ steps.published.outputs.labeled == 'false' }}
        run: |
          gh pr edit ${{ env.EVENT }} --add-label ${{ env.LABEL_PUBLISHED }} --repo ${{ env.OWNER }}/${{ env.REPO }}
        shell: bash
